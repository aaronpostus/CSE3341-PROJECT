OVERALL DESIGN OF TOKENIZER:
The TokenScanner reads a file and creates instances of the Token class.
A list of helpful constants are stored in TokenUtil.java. There are
several helper methods I implemented such as validLookAhead, tokenizeInt,
tokenizeReservedWord, tokenizeIdentifier, tokenPresent,
tokenizeSpecialCharacter, determineToken, and throwInvalidTokenError.
Most of these methods are well commented and self explanatory. The more
confusing ones to understand may be validLookAhead and determineToken.
validLookAhead is used to lookahead after a token and see if there is
white space or a special symbol. determineToken is a greedy method that
decides which token to use when there are multiple options.

USER MANUAL:
Create a text file and write a program written in the Core language.
Then, provide command line arguments to my program, and run it.
It will print a list of numbers that correspond with the appropriate
tokens in your file.

BRIEF DESCRIPTION OF TESTING, KNOWN BUGS, AND MISSING FEATURES:
I had several issues with my tokenizer at first, so I started by testing
only special symbols at first. I made a new program file and only put
special symbols in it. Then I used a lot of print statements, and I was
eventually able to fix my issues.

I don't believe there are any known bugs, but I realize that there may
be a shorter way to accomplish this. I got really attached to the idea
of creating a Utility class and a Token class, so this added quite a
few lines.

The only features that are missing are the methods intVal and idName.
The bodies are mostly complete, but we were told we didn't have to
complete them, so I didn't.

and a brief description of how you tested
the Tokenizer and a list of known remaining bugs (if any)
and missing features (if any).